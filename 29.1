#include <iostream>

template <typename T>
class DoublyLinkedList
{
    struct Node 
    {
        T data;
        Node* prev;
        Node* next;

        Node(T val) : data(val), prev(nullptr), next(nullptr) {}
    };

    Node* head;
    Node* tail;

public:
    DoublyLinkedList() : head(nullptr), tail(nullptr) {}

    ~DoublyLinkedList()
    {
        DeleteAll();
    }

    void AddToHead(T value)
    {
        Node* newNode = new Node(value);
        newNode->next = head;
        if (head != nullptr)
        {
            head->prev = newNode;
        }
        head = newNode;
        if (tail == nullptr)
        {
            tail = head;
        }
    }

    void AddToTail(T value)
    {
        Node* newNode = new Node(value);
        newNode->prev = tail;
        if (tail != nullptr)
        {
            tail->next = newNode;
        }
        tail = newNode;
        if (head == nullptr)
        {
            head = tail;
        }
    }

    void DeleteFromHead()
    {
        if (head == nullptr)
        {
            return;
        }
        Node* temp = head;
        head = head->next;
        if (head != nullptr)
        {
            head->prev = nullptr;
        }
        else
        {
            tail = nullptr;
        }
        delete temp;
    }

    void DeleteFromTail()
    {
        if (tail == nullptr)
        {
            return;
        }
        Node* temp = tail;
        tail = tail->prev;
        if (tail != nullptr)
        {
            tail->next = nullptr;
        }
        else
        {
            head = nullptr;
        }
        delete temp;
    }

    void DeleteAll()
    {
        while (head != nullptr)
        {
            DeleteFromHead();
        }
    }

    void Show() const
    {
        Node* current = head;
        while (current != nullptr)
        {
            std::cout << current->data << " <-> ";
            current = current->next;
        }
        std::cout << "NULL\n";
    }
};

int main()
{
    DoublyLinkedList<int> list;

    list.AddToHead(10);
    list.AddToHead(20);
    list.AddToTail(5);
    list.Show();

    list.DeleteFromHead();
    list.Show();

    list.DeleteFromTail();
    list.Show();

    list.DeleteAll();
    list.Show();

    return 0;
}
