#include <iostream>

template <typename T>
class DoublyLinkedList
{
    struct Node
    {
        T data;
        Node* prev;
        Node* next;

        Node(T val) : data(val), prev(nullptr), next(nullptr) {}
    };

    Node* head;
    Node* tail;

public:
    DoublyLinkedList() : head(nullptr), tail(nullptr) {}

    ~DoublyLinkedList()
    {
        DeleteAll();
    }

    void AddToHead(T value)
    {
        Node* newNode = new Node(value);
        newNode->next = head;
        if (head != nullptr)
        {
            head->prev = newNode;
        }
        head = newNode;
        if (tail == nullptr)
        {
            tail = head;
        }
    }

    void AddToTail(T value)
    {
        Node* newNode = new Node(value);
        newNode->prev = tail;
        if (tail != nullptr)
        {
            tail->next = newNode;
        }
        tail = newNode;
        if (head == nullptr)
        {
            head = tail;
        }
    }

    void DeleteFromHead()
    {
        if (head == nullptr)
        {
            return;
        }
        Node* temp = head;
        head = head->next;
        if (head != nullptr)
        {
            head->prev = nullptr;
        }
        else
        {
            tail = nullptr;
        }
        delete temp;
    }

    void DeleteFromTail()
    {
        if (tail == nullptr)
        {
            return;
        }
        Node* temp = tail;
        tail = tail->prev;
        if (tail != nullptr)
        {
            tail->next = nullptr;
        }
        else
        {
            head = nullptr;
        }
        delete temp;
    }

    void DeleteAll()
    {
        while (head != nullptr)
        {
            DeleteFromHead();
        }
    }

    void Show() const
    {
        Node* current = head;
        while (current != nullptr)
        {
            std::cout << current->data << " <-> ";
            current = current->next;
        }
        std::cout << "NULL\n";
    }

    bool InsertAt(int pos, T value)
    {
        if (pos < 0)
        {
            return false;
        }
        if (pos == 0)
        {
            AddToHead(value);
            return true;
        }

        Node* current = head;
        int index = 0;
        while (current != nullptr && index < pos - 1)
        {
            current = current->next;
            index++;
        }
        if (current == nullptr)
        {
            return false;
        }

        Node* newNode = new Node(value);
        newNode->next = current->next;
        newNode->prev = current;

        if (current->next != nullptr)
        {
            current->next->prev = newNode;
        }
        else
        {
            tail = newNode;
        }

        current->next = newNode;
        return true;
    }

    bool DeleteAt(int pos)
    {
        if (pos < 0 || head == nullptr)
        {
            return false;
        }
        if (pos == 0)
        {
            DeleteFromHead();
            return true;
        }

        Node* current = head;
        int index = 0;
        while (current != nullptr && index < pos)
        {
            current = current->next;
            index++;
        }
        if (current == nullptr)
        {
            return false;
        }

        if (current->prev != nullptr)
        {
            current->prev->next = current->next;
        }
        if (current->next != nullptr)
        {
            current->next->prev = current->prev;
        }
        else
        {
            tail = current->prev;
        }

        delete current;
        return true;
    }

    int Find(T value) const
    {
        Node* current = head;
        int pos = 0;
        while (current != nullptr)
        {
            if (current->data == value)
            {
                return pos;
            }
            current = current->next;
            pos++;
        }
        return -1;
    }

    int FindAndReplace(T searchVal, T replaceVal)
    {
        Node* current = head;
        int count = 0;
        while (current != nullptr)
        {
            if (current->data == searchVal)
            {
                current->data = replaceVal;
                count++;
            }
            current = current->next;
        }
        return count > 0 ? count : -1;
    }

    void Reverse()
    {
        Node* current = head;
        Node* temp = nullptr;
        while (current != nullptr)
        {
            temp = current->prev;
            current->prev = current->next;
            current->next = temp;
            current = current->prev;
        }
        if (temp != nullptr)
        {
            temp = temp->prev;
            std::swap(head, tail);
        }
    }
};


int main()
{
    DoublyLinkedList<int> list;
    list.AddToTail(1);
    list.AddToTail(2);
    list.AddToTail(3);
    list.Show();

    list.InsertAt(1, 10);
    list.Show();

    list.DeleteAt(2);
    list.Show();

    int pos = list.Find(10);
    std::cout << "Position of 10: " << pos << "\n";

    int replaced = list.FindAndReplace(10, 20);
    std::cout << "Replaced: " << replaced << " elements\n";
    list.Show();

    list.Reverse();
    list.Show();

    return 0;
}
